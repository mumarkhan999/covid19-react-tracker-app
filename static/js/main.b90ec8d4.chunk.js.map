{"version":3,"sources":["components/Countries.js","components/FilterButton.js","components/Description.js","components/Main.js","App.js","index.js"],"names":["Countries","countries","handleCountrySelect","countriesOptions","map","country","value","Country","className","onChange","event","target","options","selectedIndex","text","FilterButton","handleClick","onClick","Description","text1","value1","text2","value2","undefined","Main","React","useState","selectedCountry","setSelectedCountry","filteredCountryData","setFilteredCountryData","description","setDescription","useQuery","a","axios","get","countriesData","data","length","sort","b","countriesIsLoading","isLoading","countriesError","error","summaryData","summaryIsLoading","summaryError","buttonMapping","currentCountry","Object","keys","countryData","filter","filterCountryData","NewConfirmed","TotalConfirmed","NewDeaths","TotalDeaths","NewRecovered","TotalRecovered","message","countryName","queryClient","QueryClient","App","QueryClientProvider","client","initialIsOpen","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b90ec8d4.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Countries({ countries, handleCountrySelect }) {\n    const countriesOptions = countries.map((country) => (\n        <option key={country.Country} value={country.Country}>\n            {country.Country}\n        </option>\n    ));\n\n    return (\n        <select\n            className=\"select-css\"\n            onChange={(event) =>\n                handleCountrySelect(\n                    event.target.options[event.target.selectedIndex].text\n                )\n            }\n        >\n            {countriesOptions}\n        </select>\n    );\n}\n\nexport default Countries;\n","import React from \"react\";\n\nfunction FilterButton({ value, handleClick }) {\n    return (\n        <button className=\"btn btn-primary\" value={value} onClick={(event) => handleClick(event)}>\n            {value}\n        </button>\n    );\n}\n\nexport default FilterButton;\n","import React from \"react\";\n\nfunction Description({ text1, value1, text2, value2 }) {\n    if (text1 === \"\" && text2 === \"\") {\n        return \"\";\n    }\n    return (\n        <>\n            <p>\n                <strong>{text1}: </strong>\n                {(value1 === undefined || value1 === \"\") ? \"N/A\" : value1}\n            </p>\n            <p>\n                <strong>{text2}: </strong>\n                {(value2 === undefined || value2 === \"\") ? \"N/A\" : value2}\n            </p>\n        </>\n    );\n}\n\nexport default Description;\n","import React from \"react\";\nimport { useQuery } from \"react-query\";\nimport axios from \"axios\";\n\nimport Countries from \"./Countries\";\nimport FilterButton from \"./FilterButton\";\nimport Description from \"./Description\";\n\nfunction Main() {\n    // hooks\n    const [selectedCountry, setSelectedCountry] = React.useState(\"\");\n    const [filteredCountryData, setFilteredCountryData] = React.useState({});\n    const [description, setDescription] = React.useState({\n        text1: \"\",\n        value1: \"\",\n        text2: \"\",\n        value2: \"\",\n    });\n    const {\n        isLoading: countriesIsLoading,\n        error: countriesError,\n        data: countriesData,\n    } = useQuery(\"countiesData\", async () => {\n        let countriesData = (\n            await axios.get(\"https://api.covid19api.com/countries\")\n        ).data;\n        if (countriesData && countriesData.length > 0) {\n            countriesData.sort((a, b) => {\n                if (a.Country < b.Country) {\n                    return -1;\n                }\n                if (a.Country > b.Country) {\n                    return 1;\n                }\n                return 0;\n            });\n            setSelectedCountry(countriesData[0].Country);\n        }\n        return countriesData;\n    });\n    const {\n        isLoading: summaryIsLoading,\n        error: summaryError,\n        data: summaryData,\n    } = useQuery(\"summaryData\", async () => {\n        let summaryData = (\n            await axios.get(\"https://api.covid19api.com/summary\")\n        ).data;\n        if (\"Countries\" in summaryData) {\n            return summaryData.Countries;\n        } else {\n            return null;\n        }\n    });\n\n    // setters\n    const filterCountryData = () => {\n        if (\n            selectedCountry !== \"\" &&\n            Object.keys(filteredCountryData).length > 0\n        ) {\n            if (selectedCountry === filteredCountryData.Country) {\n                // if you have already get the data of same country\n                // no need to filter that data again\n                return filteredCountryData;\n            }\n        }\n        let countryData = summaryData.filter(\n            (countryData) => countryData.Country === selectedCountry\n        );\n        if (countryData.length > 0) {\n            setFilteredCountryData(countryData[0]);\n            return countryData[0];\n        } else {\n            setFilteredCountryData({});\n            return {};\n        }\n    };\n\n    // handlers\n    var handleCountrySelect = (countryName) => {\n        setSelectedCountry(countryName);\n        setDescription({\n            text1: \"\",\n            value1: \"\",\n            text2: \"\",\n            value2: \"\",\n        });\n    };\n\n    const buttonMapping = {\n        CONFIRMED: \"Confirmed Cases\",\n        DEATHS: \"Deaths\",\n        RECOVERED: \"Recovered\",\n    };\n\n    const handleClick = (event) => {\n        let currentCountry = filterCountryData();\n        switch (event.target.value) {\n            case buttonMapping.CONFIRMED:\n                setDescription({\n                    text1: \"New confirmed cases\",\n                    value1: currentCountry.NewConfirmed,\n                    text2: \"Total confirmed cases\",\n                    value2: currentCountry.TotalConfirmed,\n                });\n                break;\n            case buttonMapping.DEATHS:\n                setDescription({\n                    text1: \"New deaths\",\n                    value1: currentCountry.NewDeaths,\n                    text2: \"Total deaths\",\n                    value2: currentCountry.TotalDeaths,\n                });\n                break;\n            case buttonMapping.RECOVERED:\n                setDescription({\n                    text1: \"New recovered cases\",\n                    value1: currentCountry.NewRecovered,\n                    text2: \"Total recovered cases\",\n                    value2: currentCountry.TotalRecovered,\n                });\n                break;\n            default:\n                break;\n        }\n    };\n\n    // final return statements\n\n    if (countriesIsLoading || summaryIsLoading) return <p>\"Loading ...\"</p>;\n\n    if (summaryData === null)\n        return (\n            <p>\n                \"Couldn't fetch country details. One possible reason is that\n                caching might be in progress.\"\n            </p>\n        );\n\n    if (countriesError || summaryError)\n        return (\n            <p>\n                \"Error:\" {countriesError.message} {summaryError.message}\n            </p>\n        );\n\n    return (\n        <div>\n            <h1 className=\"main-heading\">COVID19 TRACKER</h1>\n            <div className=\"main\">\n                <div className=\"countries\">\n                    <Countries\n                        countries={countriesData}\n                        handleCountrySelect={handleCountrySelect}\n                    />\n                </div>\n                <div className=\"btn-group country-buttons\">\n                    <FilterButton\n                        value={buttonMapping.CONFIRMED}\n                        handleClick={handleClick}\n                    />\n                    <FilterButton\n                        value={buttonMapping.DEATHS}\n                        handleClick={handleClick}\n                    />\n                    <FilterButton\n                        value={buttonMapping.RECOVERED}\n                        handleClick={handleClick}\n                    />\n                </div>\n            </div>\n            <div className=\"description\">\n                <Description\n                    text1={description.text1}\n                    value1={description.value1}\n                    text2={description.text2}\n                    value2={description.value2}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default Main;\n","import { ReactQueryDevtools } from 'react-query/devtools'\nimport { QueryClient, QueryClientProvider} from \"react-query\";\nimport Main from \"./components/Main\";\n\nconst queryClient = new QueryClient();\n\nexport default function App() {\n    return (\n        <QueryClientProvider client={queryClient}>\n            <Main />\n            <ReactQueryDevtools initialIsOpen={true} />\n        </QueryClientProvider>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// Make sure that you load your custom css after bootstrap\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}